package com.zikkis.lepopo.worldofpopo;



import static org.anddev.andengine.extension.physics.box2d.util.constants.PhysicsConstants.PIXEL_TO_METER_RATIO_DEFAULT;

import org.anddev.andengine.engine.Engine;
import org.anddev.andengine.engine.camera.Camera;
import org.anddev.andengine.engine.options.EngineOptions;
import org.anddev.andengine.engine.options.EngineOptions.ScreenOrientation;
import org.anddev.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.anddev.andengine.entity.primitive.Rectangle;
import org.anddev.andengine.entity.scene.Scene;
import org.anddev.andengine.entity.scene.Scene.IOnSceneTouchListener;
import org.anddev.andengine.entity.scene.background.ColorBackground;
import org.anddev.andengine.entity.shape.Shape;
import org.anddev.andengine.entity.sprite.AnimatedSprite;
import org.anddev.andengine.entity.sprite.Sprite;
import org.anddev.andengine.entity.util.FPSLogger;
import org.anddev.andengine.extension.physics.box2d.PhysicsConnector;
import org.anddev.andengine.extension.physics.box2d.PhysicsFactory;
import org.anddev.andengine.extension.physics.box2d.PhysicsWorld;
import org.anddev.andengine.input.touch.TouchEvent;
import org.anddev.andengine.opengl.texture.Texture;
import org.anddev.andengine.opengl.texture.TextureOptions;
import org.anddev.andengine.opengl.texture.region.TextureRegion;
import org.anddev.andengine.opengl.texture.region.TextureRegionFactory;
import org.anddev.andengine.opengl.texture.region.TiledTextureRegion;
import org.anddev.andengine.sensor.accelerometer.AccelerometerData;
import org.anddev.andengine.sensor.accelerometer.IAccelerometerListener;
import org.anddev.andengine.ui.activity.BaseGameActivity;
import org.anddev.andengine.util.Debug;

import android.hardware.SensorManager;
import android.widget.Toast;

import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;

/**
 * @author Nicolas Gramlich
 * @since 18:47:08 - 19.03.2010
 */
public class World extends BaseGameActivity implements IAccelerometerListener, IOnSceneTouchListener {
        // ===========================================================
        // Constants
        // ===========================================================

	// ===========================================================
    // Constants
    // ===========================================================

	private static final int LAYER_BACKGROUND = 0;
    private static final int CAMERA_WIDTH = 800;
    private static final int CAMERA_HEIGHT = 480;
    private static final FixtureDef FIXTURE_DEF = PhysicsFactory.createFixtureDef(1, 0.5f, 0.5f);


    // ===========================================================
    // Fields
    // ===========================================================

    private Camera mCamera;

    private Texture mTexture;
    private TextureRegion mFaceTextureRegion;

    private Texture mOnScreenControlTexture;
    private TextureRegion mOnScreenControlBaseTextureRegion;
    private TextureRegion mOnScreenControlKnobTextureRegion;
	private Texture mBackgroundTexture;
	private TextureRegion mBackgroundTextureRegion;
	
	private TextureRegion mBoxFaceTextureRegion;

    private PhysicsWorld mPhysicsWorld;

    private int mFaceCount = 0;

    
    
    
    public Engine onLoadEngine() {
        	Toast.makeText(this, "Coucou vous voici dans l'application de LEPOPO", Toast.LENGTH_LONG).show();
            this.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
            return new Engine(new EngineOptions(true, ScreenOrientation.LANDSCAPE, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera));
    }

       
    
    
    
    
    public void onLoadResources() {
                /* Textures. */
    	
    	
    	TextureRegionFactory.setAssetBasePath("gfx/");

        this.mTexture = new Texture(32, 32, TextureOptions.BILINEAR_PREMULTIPLYALPHA);
        this.mFaceTextureRegion = TextureRegionFactory.createFromAsset(this.mTexture, this, "face_box.png", 0, 0);

        //this.mBackgroundTexture = new Texture(480, 320, TextureOptions.DEFAULT);
        //this.mBackgroundTextureRegion = TextureRegionFactory.createFromAsset(this.mBackgroundTexture, this, "Fond.png", 0, 0);

        
        this.mOnScreenControlTexture = new Texture(256, 128, TextureOptions.BILINEAR_PREMULTIPLYALPHA);
        this.mOnScreenControlBaseTextureRegion = TextureRegionFactory.createFromAsset(this.mOnScreenControlTexture, this, "onscreen_control_base.png", 0, 0);
        this.mOnScreenControlKnobTextureRegion = TextureRegionFactory.createFromAsset(this.mOnScreenControlTexture, this, "onscreen_control_knob.png", 128, 0);

        this.mEngine.getTextureManager().loadTextures(this.mTexture, this.mOnScreenControlTexture);

        this.enableAccelerometerSensor(this);
    	
    	
             
        }

		public Scene onLoadScene() {
			// TODO Auto-generated method stub
			this.mEngine.registerUpdateHandler(new FPSLogger());
			
			//this.mPhysicsWorld = new PhysicsWorld(new Vector2(0, SensorManager.GRAVITY_EARTH), false);

            final Scene scene = new Scene(1);
            //scene.setBackgroundEnabled(false);
            //scene.getLayer(LAYER_BACKGROUND).addEntity(new Sprite(0, 0, this.mBackgroundTextureRegion));
            scene.setBackground(new ColorBackground(1.0f, 0.5f, 0.8f));
            final int centerX = (CAMERA_WIDTH - this.mFaceTextureRegion.getWidth()) / 2;
            final int centerY = (CAMERA_HEIGHT - this.mFaceTextureRegion.getHeight()) / 2;
            final Sprite face = new Sprite(centerX, centerY, this.mFaceTextureRegion);

            scene.getTopLayer().addEntity(face);
            
            final Shape ground = new Rectangle(0, CAMERA_HEIGHT - 2, CAMERA_WIDTH, 2);
            final Shape roof = new Rectangle(0, 0, CAMERA_WIDTH, 2);
            final Shape left = new Rectangle(0, 0, 2, CAMERA_HEIGHT);
            final Shape right = new Rectangle(CAMERA_WIDTH - 2, 0, 2, CAMERA_HEIGHT);

            /*final FixtureDef wallFixtureDef = PhysicsFactory.createFixtureDef(0, 0.5f, 0.5f);
            PhysicsFactory.createBoxBody(this.mPhysicsWorld, ground, BodyType.StaticBody, wallFixtureDef);
            PhysicsFactory.createBoxBody(this.mPhysicsWorld, roof, BodyType.StaticBody, wallFixtureDef);
            PhysicsFactory.createBoxBody(this.mPhysicsWorld, left, BodyType.StaticBody, wallFixtureDef);
            PhysicsFactory.createBoxBody(this.mPhysicsWorld, right, BodyType.StaticBody, wallFixtureDef);
*/
            scene.getBottomLayer().addEntity(ground);
            scene.getBottomLayer().addEntity(roof);
            scene.getBottomLayer().addEntity(left);
            scene.getBottomLayer().addEntity(right);
            
            //scene.registerUpdateHandler(this.mPhysicsWorld);
            
            this.enableAccelerometerSensor(this);
            
            return scene;
		}

		public void onLoadComplete() {
			// TODO Auto-generated method stub
			
		}

		public boolean onSceneTouchEvent(Scene pScene,TouchEvent pSceneTouchEvent) {
			// TODO Auto-generated method stub
			return false;
		}

		public void onAccelerometerChanged(AccelerometerData pAccelerometerData) {
			// TODO Auto-generated method stub
			
		}
}
/*
        public Scene onLoadScene() {
                this.mEngine.registerUpdateHandler(new FPSLogger());

                final Scene scene = new Scene(2);
                scene.setBackground(new ColorBackground(0, 0, 0));
                scene.setOnSceneTouchListener(this);

                this.mPhysicsWorld = new PhysicsWorld(new Vector2(0, SensorManager.GRAVITY_EARTH), false);

                final Shape ground = new Rectangle(0, CAMERA_HEIGHT - 2, CAMERA_WIDTH, 2);
                final Shape roof = new Rectangle(0, 0, CAMERA_WIDTH, 2);
                final Shape left = new Rectangle(0, 0, 2, CAMERA_HEIGHT);
                final Shape right = new Rectangle(CAMERA_WIDTH - 2, 0, 2, CAMERA_HEIGHT);

                final FixtureDef wallFixtureDef = PhysicsFactory.createFixtureDef(0, 0.5f, 0.5f);
                PhysicsFactory.createBoxBody(this.mPhysicsWorld, ground, BodyType.StaticBody, wallFixtureDef);
                PhysicsFactory.createBoxBody(this.mPhysicsWorld, roof, BodyType.StaticBody, wallFixtureDef);
                PhysicsFactory.createBoxBody(this.mPhysicsWorld, left, BodyType.StaticBody, wallFixtureDef);
                PhysicsFactory.createBoxBody(this.mPhysicsWorld, right, BodyType.StaticBody, wallFixtureDef);

                scene.getBottomLayer().addEntity(ground);
                scene.getBottomLayer().addEntity(roof);
                scene.getBottomLayer().addEntity(left);
                scene.getBottomLayer().addEntity(right);

                scene.registerUpdateHandler(this.mPhysicsWorld);

                return scene;
        }

        public void onLoadComplete() {

        }

        public boolean onSceneTouchEvent(final Scene pScene, final TouchEvent pSceneTouchEvent) {
                if(this.mPhysicsWorld != null) {
                        if(pSceneTouchEvent.getAction() == TouchEvent.ACTION_DOWN) {
                                this.runOnUpdateThread(new Runnable() {
                                        public void run() {
                                                World.this.addFace(pSceneTouchEvent.getX(), pSceneTouchEvent.getY());
                                        }
                                });
                                return true;
                        }
                }
                return false;
        }

        public void onAccelerometerChanged(final AccelerometerData pAccelerometerData) {
                this.mPhysicsWorld.setGravity(new Vector2(pAccelerometerData.getY(), pAccelerometerData.getX()));
        }

        // ===========================================================
        // Methods
        // ===========================================================

        private void addFace(final float pX, final float pY) {
                final Scene scene = this.mEngine.getScene();

                this.mFaceCount++;
                Debug.d("Faces: " + this.mFaceCount);

                               
                final Body body;
                final Sprite face = new Sprite(pX, pY, this.mBoxFaceTextureRegion);
                body = PhysicsFactory.createBoxBody(this.mPhysicsWorld, face, BodyType.DynamicBody, FIXTURE_DEF);
                
                
                face.setUpdatePhysics(false);
                
                
                
                scene.getTopLayer().addEntity(face);
                
                
                scene.getTopLayer().addEntity(face);
                this.mPhysicsWorld.registerPhysicsConnector(new PhysicsConnector(face, body, true, true, false, false));
        }

       
        // ===========================================================
        // Inner and Anonymous Classes
        // ===========================================================
}















/*
import javax.microedition.khronos.opengles.GL10;

import org.anddev.andengine.engine.Engine;
import org.anddev.andengine.engine.camera.Camera;
import org.anddev.andengine.engine.camera.hud.controls.AnalogOnScreenControl;
import org.anddev.andengine.engine.camera.hud.controls.AnalogOnScreenControl.IAnalogOnScreenControlListener;
import org.anddev.andengine.engine.camera.hud.controls.BaseOnScreenControl;
import org.anddev.andengine.engine.options.EngineOptions;
import org.anddev.andengine.engine.options.EngineOptions.ScreenOrientation;
import org.anddev.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.anddev.andengine.entity.scene.Scene;
import org.anddev.andengine.entity.scene.background.ColorBackground;
import org.anddev.andengine.entity.shape.modifier.ScaleModifier;
import org.anddev.andengine.entity.shape.modifier.SequenceShapeModifier;
import org.anddev.andengine.entity.sprite.Sprite;
import org.anddev.andengine.entity.util.FPSLogger;
import org.anddev.andengine.opengl.texture.Texture;
import org.anddev.andengine.opengl.texture.TextureOptions;
import org.anddev.andengine.opengl.texture.region.TextureRegion;
import org.anddev.andengine.opengl.texture.region.TextureRegionFactory;
import org.anddev.andengine.sensor.accelerometer.AccelerometerData;
import org.anddev.andengine.sensor.accelerometer.IAccelerometerListener;
import org.anddev.andengine.ui.activity.BaseGameActivity;

import android.widget.Toast;




public class World extends BaseGameActivity implements IAccelerometerListener {
    // ===========================================================
    // Constants
    // ===========================================================

	private static final int LAYER_BACKGROUND = 0;
    private static final int CAMERA_WIDTH = 800;
    private static final int CAMERA_HEIGHT = 480;

    // ===========================================================
    // Fields
    // ===========================================================

    private Camera mCamera;

    private Texture mTexture;
    private TextureRegion mFaceTextureRegion;

    private Texture mOnScreenControlTexture;
    private TextureRegion mOnScreenControlBaseTextureRegion;
    private TextureRegion mOnScreenControlKnobTextureRegion;
	private Texture mBackgroundTexture;
	private TextureRegion mBackgroundTextureRegion;

    // ===========================================================
    // Constructors
    // ===========================================================

    // ===========================================================
    // Getter & Setter
    // ===========================================================

    // ===========================================================
    // Methods for/from SuperClass/Interfaces
    // ===========================================================

    public Engine onLoadEngine() {
            Toast.makeText(this, "Coucou vous voici dans l'application de LEPOPO", Toast.LENGTH_LONG).show();
            this.mCamera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
            return new Engine(new EngineOptions(true, ScreenOrientation.LANDSCAPE, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), this.mCamera));
    }

    public void onLoadResources() {
            TextureRegionFactory.setAssetBasePath("gfx/");

            this.mTexture = new Texture(32, 32, TextureOptions.BILINEAR_PREMULTIPLYALPHA);
            this.mFaceTextureRegion = TextureRegionFactory.createFromAsset(this.mTexture, this, "face_box.png", 0, 0);

            //this.mBackgroundTexture = new Texture(480, 320, TextureOptions.DEFAULT);
            //this.mBackgroundTextureRegion = TextureRegionFactory.createFromAsset(this.mBackgroundTexture, this, "Fond.png", 0, 0);

            
            this.mOnScreenControlTexture = new Texture(256, 128, TextureOptions.BILINEAR_PREMULTIPLYALPHA);
            this.mOnScreenControlBaseTextureRegion = TextureRegionFactory.createFromAsset(this.mOnScreenControlTexture, this, "onscreen_control_base.png", 0, 0);
            this.mOnScreenControlKnobTextureRegion = TextureRegionFactory.createFromAsset(this.mOnScreenControlTexture, this, "onscreen_control_knob.png", 128, 0);

            this.mEngine.getTextureManager().loadTextures(this.mTexture, this.mOnScreenControlTexture);
    
            this.enableAccelerometerSensor(this);
    }

    public Scene onLoadScene() {
            this.mEngine.registerUpdateHandler(new FPSLogger());

            final Scene scene = new Scene(1);
            //scene.setBackgroundEnabled(false);
            //scene.getLayer(LAYER_BACKGROUND).addEntity(new Sprite(0, 0, this.mBackgroundTextureRegion));
            scene.setBackground(new ColorBackground(1.0f, 0.5f, 0.8f));

            final int centerX = (CAMERA_WIDTH - this.mFaceTextureRegion.getWidth()) / 2;
            final int centerY = (CAMERA_HEIGHT - this.mFaceTextureRegion.getHeight()) / 2;
            final Sprite face = new Sprite(centerX, centerY, this.mFaceTextureRegion);

            scene.getTopLayer().addEntity(face);

            final AnalogOnScreenControl analogOnScreenControl = new AnalogOnScreenControl(0, CAMERA_HEIGHT - this.mOnScreenControlBaseTextureRegion.getHeight(), this.mCamera, this.mOnScreenControlBaseTextureRegion, this.mOnScreenControlKnobTextureRegion, 0.1f, 200, new IAnalogOnScreenControlListener() {
               
                    public void onControlChange(final BaseOnScreenControl pBaseOnScreenControl, final float pValueX, final float pValueY) {
                            face.setVelocity(pValueX * 1000, pValueY * 500);
                    }

                   
                    public void onControlClick(final AnalogOnScreenControl pAnalogOnScreenControl) {
                            face.addShapeModifier(new SequenceShapeModifier(new ScaleModifier(0.25f, 1, 1.5f), new ScaleModifier(0.25f, 1.5f, 1)));
                    }
            });
            analogOnScreenControl.getControlBase().setBlendFunction(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
            analogOnScreenControl.getControlBase().setAlpha(0.5f);
            analogOnScreenControl.getControlBase().setScaleCenter(0, 128);
            analogOnScreenControl.getControlBase().setScale(1.25f);
            analogOnScreenControl.getControlKnob().setScale(1.25f);
            analogOnScreenControl.refreshControlKnobPosition();

            scene.setChildScene(analogOnScreenControl);

            return scene;
    }

    
    public void onLoadComplete() {

    }

	public void onAccelerometerChanged(AccelerometerData pAccelerometerData) {
		// TODO Auto-generated method stub
		
	}

    // ===========================================================
    // Methods
    // ===========================================================

    // ===========================================================
    // Inner and Anonymous Classes
    // ===========================================================
}
*/
